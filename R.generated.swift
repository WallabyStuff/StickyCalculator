//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `History`.
    static let history = _R.storyboard.history()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "History", bundle: ...)`
    static func history(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.history)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 22 colors.
  struct color {
    /// Color `AccentBlack-light`.
    static let accentBlackLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentBlack-light")
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AccentPink-placeholder`.
    static let accentPinkPlaceholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentPink-placeholder")
    /// Color `AccentPink`.
    static let accentPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentPink")
    /// Color `AccentYellow`.
    static let accentYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentYellow")
    /// Color `BackgroundColor-reversed`.
    static let backgroundColorReversed = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColor-reversed")
    /// Color `BackgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColor")
    /// Color `BackgroundGray-lighter`.
    static let backgroundGrayLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGray-lighter")
    /// Color `BackgroundGray-lightest`.
    static let backgroundGrayLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGray-lightest")
    /// Color `BackgroundGray`.
    static let backgroundGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGray")
    /// Color `IconBlack`.
    static let iconBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconBlack")
    /// Color `IconColor`.
    static let iconColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconColor")
    /// Color `IconWhite`.
    static let iconWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconWhite")
    /// Color `Item-blue`.
    static let itemBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Item-blue")
    /// Color `Item-mint`.
    static let itemMint = Rswift.ColorResource(bundle: R.hostingBundle, name: "Item-mint")
    /// Color `Item-red`.
    static let itemRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "Item-red")
    /// Color `Item-yellow`.
    static let itemYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Item-yellow")
    /// Color `LineGray-reversed`.
    static let lineGrayReversed = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray-reversed")
    /// Color `LineGray`.
    static let lineGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray")
    /// Color `TextColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextColor")
    /// Color `TextGray-light`.
    static let textGrayLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextGray-light")
    /// Color `TextGray`.
    static let textGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentBlack-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBlackLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBlackLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentPink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentPink-placeholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentPinkPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentPinkPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundColor-reversed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColorReversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColorReversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGray-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGrayLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGrayLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGray-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGrayLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGrayLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Item-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func itemBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.itemBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Item-mint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func itemMint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.itemMint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Item-red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func itemRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.itemRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Item-yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func itemYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.itemYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray-reversed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGrayReversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGrayReversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextGray-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textGrayLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textGrayLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentBlack-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBlackLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBlackLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentPink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentPink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentPink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentPink-placeholder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentPinkPlaceholder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentPinkPlaceholder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentYellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundColor-reversed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColorReversed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColorReversed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundGray-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGrayLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGrayLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundGray-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGrayLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGrayLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Item-blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func itemBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.itemBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Item-mint", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func itemMint(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.itemMint.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Item-red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func itemRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.itemRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Item-yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func itemYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.itemYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray-reversed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGrayReversed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGrayReversed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextGray-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textGrayLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textGrayLight.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `NanumSquareRound-Bold.otf`.
    static let nanumSquareRoundBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareRound-Bold", pathExtension: "otf")
    /// Resource file `NanumSquareRound-ExtraBold.otf`.
    static let nanumSquareRoundExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareRound-ExtraBold", pathExtension: "otf")
    /// Resource file `NanumSquareRound-Light.otf`.
    static let nanumSquareRoundLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareRound-Light", pathExtension: "otf")
    /// Resource file `NanumSquareRound-Regular.otf`.
    static let nanumSquareRoundRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareRound-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "NanumSquareRound-Bold", withExtension: "otf")`
    static func nanumSquareRoundBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareRoundBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareRound-ExtraBold", withExtension: "otf")`
    static func nanumSquareRoundExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareRoundExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareRound-Light", withExtension: "otf")`
    static func nanumSquareRoundLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareRoundLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareRound-Regular", withExtension: "otf")`
    static func nanumSquareRoundRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareRoundRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `NanumSquareRoundOTFB`.
    static let nanumSquareRoundOTFB = Rswift.FontResource(fontName: "NanumSquareRoundOTFB")
    /// Font `NanumSquareRoundOTFEB`.
    static let nanumSquareRoundOTFEB = Rswift.FontResource(fontName: "NanumSquareRoundOTFEB")
    /// Font `NanumSquareRoundOTFL`.
    static let nanumSquareRoundOTFL = Rswift.FontResource(fontName: "NanumSquareRoundOTFL")
    /// Font `NanumSquareRoundOTFR`.
    static let nanumSquareRoundOTFR = Rswift.FontResource(fontName: "NanumSquareRoundOTFR")

    /// `UIFont(name: "NanumSquareRoundOTFB", size: ...)`
    static func nanumSquareRoundOTFB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareRoundOTFB, size: size)
    }

    /// `UIFont(name: "NanumSquareRoundOTFEB", size: ...)`
    static func nanumSquareRoundOTFEB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareRoundOTFEB, size: size)
    }

    /// `UIFont(name: "NanumSquareRoundOTFL", size: ...)`
    static func nanumSquareRoundOTFL(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareRoundOTFL, size: size)
    }

    /// `UIFont(name: "NanumSquareRoundOTFR", size: ...)`
    static func nanumSquareRoundOTFR(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareRoundOTFR, size: size)
    }

    static func validate() throws {
      if R.font.nanumSquareRoundOTFB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareRoundOTFB' could not be loaded, is 'NanumSquareRound-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareRoundOTFEB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareRoundOTFEB' could not be loaded, is 'NanumSquareRound-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareRoundOTFL(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareRoundOTFL' could not be loaded, is 'NanumSquareRound-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareRoundOTFR(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareRoundOTFR' could not be loaded, is 'NanumSquareRound-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `backspace`.
    static let backspace = Rswift.ImageResource(bundle: R.hostingBundle, name: "backspace")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `divide`.
    static let divide = Rswift.ImageResource(bundle: R.hostingBundle, name: "divide")
    /// Image `dot`.
    static let dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "dot")
    /// Image `equal`.
    static let equal = Rswift.ImageResource(bundle: R.hostingBundle, name: "equal")
    /// Image `flash`.
    static let flash = Rswift.ImageResource(bundle: R.hostingBundle, name: "flash")
    /// Image `folder`.
    static let folder = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder")
    /// Image `gear`.
    static let gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `multiply`.
    static let multiply = Rswift.ImageResource(bundle: R.hostingBundle, name: "multiply")
    /// Image `paint-brush`.
    static let paintBrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "paint-brush")
    /// Image `percent`.
    static let percent = Rswift.ImageResource(bundle: R.hostingBundle, name: "percent")
    /// Image `plus-minus`.
    static let plusMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus-minus")
    /// Image `right-chevron`.
    static let rightChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-chevron")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backspace", bundle: ..., traitCollection: ...)`
    static func backspace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backspace, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "divide", bundle: ..., traitCollection: ...)`
    static func divide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.divide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dot", bundle: ..., traitCollection: ...)`
    static func dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "equal", bundle: ..., traitCollection: ...)`
    static func equal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.equal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flash", bundle: ..., traitCollection: ...)`
    static func flash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder", bundle: ..., traitCollection: ...)`
    static func folder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gear", bundle: ..., traitCollection: ...)`
    static func gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "multiply", bundle: ..., traitCollection: ...)`
    static func multiply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.multiply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paint-brush", bundle: ..., traitCollection: ...)`
    static func paintBrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paintBrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "percent", bundle: ..., traitCollection: ...)`
    static func percent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.percent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus-minus", bundle: ..., traitCollection: ...)`
    static func plusMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-chevron", bundle: ..., traitCollection: ...)`
    static func rightChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightChevron, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `HistoryTableViewCell`.
    static let historyTableViewCell = _R.nib._HistoryTableViewCell()
    /// Nib `OptionRowTableViewCell`.
    static let optionRowTableViewCell = _R.nib._OptionRowTableViewCell()
    /// Nib `SwitchRowTableViewCell`.
    static let switchRowTableViewCell = _R.nib._SwitchRowTableViewCell()
    /// Nib `TapActionRowTableViewCell`.
    static let tapActionRowTableViewCell = _R.nib._TapActionRowTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyTableViewCell) instead")
    static func historyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OptionRowTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.optionRowTableViewCell) instead")
    static func optionRowTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.optionRowTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SwitchRowTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.switchRowTableViewCell) instead")
    static func switchRowTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.switchRowTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TapActionRowTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tapActionRowTableViewCell) instead")
    static func tapActionRowTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tapActionRowTableViewCell)
    }
    #endif

    static func historyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewCell? {
      return R.nib.historyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
    }

    static func optionRowTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OptionRowTableViewCell? {
      return R.nib.optionRowTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OptionRowTableViewCell
    }

    static func switchRowTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SwitchRowTableViewCell? {
      return R.nib.switchRowTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SwitchRowTableViewCell
    }

    static func tapActionRowTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TapActionRowTableViewCell? {
      return R.nib.tapActionRowTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TapActionRowTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `historyTableCell`.
    static let historyTableCell: Rswift.ReuseIdentifier<HistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "historyTableCell")
    /// Reuse identifier `optionRowCell`.
    static let optionRowCell: Rswift.ReuseIdentifier<OptionRowTableViewCell> = Rswift.ReuseIdentifier(identifier: "optionRowCell")
    /// Reuse identifier `switchRowCell`.
    static let switchRowCell: Rswift.ReuseIdentifier<SwitchRowTableViewCell> = Rswift.ReuseIdentifier(identifier: "switchRowCell")
    /// Reuse identifier `tapActionRowCell`.
    static let tapActionRowCell: Rswift.ReuseIdentifier<TapActionRowTableViewCell> = Rswift.ReuseIdentifier(identifier: "tapActionRowCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.history` struct is generated, and contains static references to 2 localization keys.
    struct history {
      /// ja translation: ヒストリー
      ///
      /// Locales: ja, ko
      static let rIAQPIfMText = Rswift.StringResource(key: "rIA-QP-ifM.text", tableName: "History", bundle: R.hostingBundle, locales: ["ja", "ko"], comment: nil)
      /// ja translation: 隠す
      ///
      /// Locales: ja, ko
      static let uegXXWgiNormalTitle = Rswift.StringResource(key: "ueg-xX-Wgi.normalTitle", tableName: "History", bundle: R.hostingBundle, locales: ["ja", "ko"], comment: nil)

      /// ja translation: ヒストリー
      ///
      /// Locales: ja, ko
      static func rIAQPIfMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rIA-QP-ifM.text", tableName: "History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "History", preferredLanguages: preferredLanguages) else {
          return "rIA-QP-ifM.text"
        }

        return NSLocalizedString("rIA-QP-ifM.text", tableName: "History", bundle: bundle, comment: "")
      }

      /// ja translation: 隠す
      ///
      /// Locales: ja, ko
      static func uegXXWgiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ueg-xX-Wgi.normalTitle", tableName: "History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "History", preferredLanguages: preferredLanguages) else {
          return "ueg-xX-Wgi.normalTitle"
        }

        return NSLocalizedString("ueg-xX-Wgi.normalTitle", tableName: "History", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 20 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en, ko, ja
      static let second = Rswift.StringResource(key: "second", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: :
      ///
      /// Locales: en, ko, ja
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: :
      ///
      /// Locales: en, ko, ja
      static let minute = Rswift.StringResource(key: "minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, ko, ja
      static let about = Rswift.StringResource(key: "about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Appearance
      ///
      /// Locales: en, ko, ja
      static let appearance = Rswift.StringResource(key: "appearance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Are you sure you want to clear all histories
      ///
      /// Locales: en, ko, ja
      static let confirm_message = Rswift.StringResource(key: "confirm_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ko, ja
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Clear
      ///
      /// Locales: en, ko, ja
      static let clear = Rswift.StringResource(key: "clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, ko, ja
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en, ko, ja
      static let appearanceDark = Rswift.StringResource(key: "appearance.dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ko, ja
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Dismiss
      ///
      /// Locales: en, ko, ja
      static let dismiss = Rswift.StringResource(key: "dismiss", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en, ko, ja
      static let appearanceLight = Rswift.StringResource(key: "appearance.light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Make flash effect when you press the equal button
      ///
      /// Locales: en, ko, ja
      static let visual_effectDesc = Rswift.StringResource(key: "visual_effect.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Record history
      ///
      /// Locales: en, ko, ja
      static let record_history = Rswift.StringResource(key: "record_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Recording calculation history
      ///
      /// Locales: en, ko, ja
      static let record_historyDesc = Rswift.StringResource(key: "record_history.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Result value copied to clipboard
      ///
      /// Locales: en, ko, ja
      static let copy_message = Rswift.StringResource(key: "copy_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ko, ja
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: System
      ///
      /// Locales: en, ko, ja
      static let appearanceSystem = Rswift.StringResource(key: "appearance.system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)
      /// en translation: Visual effect
      ///
      /// Locales: en, ko, ja
      static let visual_effect = Rswift.StringResource(key: "visual_effect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko", "ja"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en, ko, ja
      static func second(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("second", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "second"
        }

        return NSLocalizedString("second", bundle: bundle, comment: "")
      }

      /// en translation: :
      ///
      /// Locales: en, ko, ja
      static func hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hour"
        }

        return NSLocalizedString("hour", bundle: bundle, comment: "")
      }

      /// en translation: :
      ///
      /// Locales: en, ko, ja
      static func minute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minute"
        }

        return NSLocalizedString("minute", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, ko, ja
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about"
        }

        return NSLocalizedString("about", bundle: bundle, comment: "")
      }

      /// en translation: Appearance
      ///
      /// Locales: en, ko, ja
      static func appearance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appearance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appearance"
        }

        return NSLocalizedString("appearance", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to clear all histories
      ///
      /// Locales: en, ko, ja
      static func confirm_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_message"
        }

        return NSLocalizedString("confirm_message", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ko, ja
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Clear
      ///
      /// Locales: en, ko, ja
      static func clear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear"
        }

        return NSLocalizedString("clear", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, ko, ja
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en, ko, ja
      static func appearanceDark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appearance.dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appearance.dark"
        }

        return NSLocalizedString("appearance.dark", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ko, ja
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", bundle: bundle, comment: "")
      }

      /// en translation: Dismiss
      ///
      /// Locales: en, ko, ja
      static func dismiss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dismiss", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dismiss"
        }

        return NSLocalizedString("dismiss", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en, ko, ja
      static func appearanceLight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appearance.light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appearance.light"
        }

        return NSLocalizedString("appearance.light", bundle: bundle, comment: "")
      }

      /// en translation: Make flash effect when you press the equal button
      ///
      /// Locales: en, ko, ja
      static func visual_effectDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visual_effect.desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visual_effect.desc"
        }

        return NSLocalizedString("visual_effect.desc", bundle: bundle, comment: "")
      }

      /// en translation: Record history
      ///
      /// Locales: en, ko, ja
      static func record_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_history"
        }

        return NSLocalizedString("record_history", bundle: bundle, comment: "")
      }

      /// en translation: Recording calculation history
      ///
      /// Locales: en, ko, ja
      static func record_historyDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_history.desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_history.desc"
        }

        return NSLocalizedString("record_history.desc", bundle: bundle, comment: "")
      }

      /// en translation: Result value copied to clipboard
      ///
      /// Locales: en, ko, ja
      static func copy_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copy_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copy_message"
        }

        return NSLocalizedString("copy_message", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ko, ja
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setting"
        }

        return NSLocalizedString("setting", bundle: bundle, comment: "")
      }

      /// en translation: System
      ///
      /// Locales: en, ko, ja
      static func appearanceSystem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appearance.system", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appearance.system"
        }

        return NSLocalizedString("appearance.system", bundle: bundle, comment: "")
      }

      /// en translation: Visual effect
      ///
      /// Locales: en, ko, ja
      static func visual_effect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visual_effect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visual_effect"
        }

        return NSLocalizedString("visual_effect", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OptionRowTableViewCell.validate()
      try _TapActionRowTableViewCell.validate()
    }

    struct _HistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HistoryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "historyTableCell"
      let name = "HistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _OptionRowTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OptionRowTableViewCell

      let bundle = R.hostingBundle
      let identifier = "optionRowCell"
      let name = "OptionRowTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OptionRowTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OptionRowTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in nib 'OptionRowTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in nib 'OptionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in nib 'OptionRowTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SwitchRowTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SwitchRowTableViewCell

      let bundle = R.hostingBundle
      let identifier = "switchRowCell"
      let name = "SwitchRowTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SwitchRowTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SwitchRowTableViewCell
      }

      fileprivate init() {}
    }

    struct _TapActionRowTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TapActionRowTableViewCell

      let bundle = R.hostingBundle
      let identifier = "tapActionRowCell"
      let name = "TapActionRowTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TapActionRowTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TapActionRowTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "right-chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-chevron' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundGray-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundGray-lighter' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGray' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGray-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGray-light' is used in nib 'TapActionRowTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try history.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try setting.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct history: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HistoryViewController

      let bundle = R.hostingBundle
      let historyStoryboard = StoryboardViewControllerResource<HistoryViewController>(identifier: "historyStoryboard")
      let name = "History"

      func historyStoryboard(_: Void = ()) -> HistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyStoryboard)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash.fill' is used in storyboard 'History', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'History', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AccentPink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentPink' is used in storyboard 'History', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundGray' is used in storyboard 'History', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor' is used in storyboard 'History', but couldn't be loaded.") }
        }
        if _R.storyboard.history().historyStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyStoryboard' could not be loaded from storyboard 'History' as 'HistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainStoryboard = StoryboardViewControllerResource<MainViewController>(identifier: "mainStoryboard")
      let name = "Main"

      func mainStoryboard(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backspace", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backspace' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "divide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'divide' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "equal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'equal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "folder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gear' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "multiply", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'multiply' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "percent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'percent' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus-minus' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGray' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().mainStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainStoryboard' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Setting"
      let settingStoryboard = StoryboardViewControllerResource<SettingViewController>(identifier: "settingStoryboard")
      let themeSelectorStoryboard = StoryboardViewControllerResource<AppearanceSelectorViewController>(identifier: "themeSelectorStoryboard")

      func settingStoryboard(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingStoryboard)
      }

      func themeSelectorStoryboard(_: Void = ()) -> AppearanceSelectorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: themeSelectorStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentPink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentPink' is used in storyboard 'Setting', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'Setting', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor' is used in storyboard 'Setting', but couldn't be loaded.") }
        }
        if _R.storyboard.setting().settingStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingStoryboard' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
        if _R.storyboard.setting().themeSelectorStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'themeSelectorStoryboard' could not be loaded from storyboard 'Setting' as 'AppearanceSelectorViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
